// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package it.phrasebook.domain;

import it.phrasebook.domain.RichiestaAcquisto;
import it.phrasebook.domain.RichiestaAcquistoDataOnDemand;
import it.phrasebook.domain.TipoRichiesta;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect RichiestaAcquistoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RichiestaAcquistoDataOnDemand: @Component;
    
    private Random RichiestaAcquistoDataOnDemand.rnd = new SecureRandom();
    
    private List<RichiestaAcquisto> RichiestaAcquistoDataOnDemand.data;
    
    public RichiestaAcquisto RichiestaAcquistoDataOnDemand.getNewTransientRichiestaAcquisto(int index) {
        RichiestaAcquisto obj = new RichiestaAcquisto();
        setDataRichiesta(obj, index);
        setNote(obj, index);
        setTipoRichiesta(obj, index);
        return obj;
    }
    
    public void RichiestaAcquistoDataOnDemand.setDataRichiesta(RichiestaAcquisto obj, int index) {
        Date dataRichiesta = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataRichiesta(dataRichiesta);
    }
    
    public void RichiestaAcquistoDataOnDemand.setNote(RichiestaAcquisto obj, int index) {
        String note = "note_" + index;
        obj.setNote(note);
    }
    
    public void RichiestaAcquistoDataOnDemand.setTipoRichiesta(RichiestaAcquisto obj, int index) {
        TipoRichiesta tipoRichiesta = TipoRichiesta.class.getEnumConstants()[0];
        obj.setTipoRichiesta(tipoRichiesta);
    }
    
    public RichiestaAcquisto RichiestaAcquistoDataOnDemand.getSpecificRichiestaAcquisto(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        RichiestaAcquisto obj = data.get(index);
        Long id = obj.getId();
        return RichiestaAcquisto.findRichiestaAcquisto(id);
    }
    
    public RichiestaAcquisto RichiestaAcquistoDataOnDemand.getRandomRichiestaAcquisto() {
        init();
        RichiestaAcquisto obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return RichiestaAcquisto.findRichiestaAcquisto(id);
    }
    
    public boolean RichiestaAcquistoDataOnDemand.modifyRichiestaAcquisto(RichiestaAcquisto obj) {
        return false;
    }
    
    public void RichiestaAcquistoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = RichiestaAcquisto.findRichiestaAcquistoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'RichiestaAcquisto' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<RichiestaAcquisto>();
        for (int i = 0; i < 10; i++) {
            RichiestaAcquisto obj = getNewTransientRichiestaAcquisto(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
